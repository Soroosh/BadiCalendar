// Mocks generated by Mockito 5.0.3 from annotations
// in first_app/test/widget/intro_dialog_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i4;

import 'package:badi_calendar/model/configuration.dart' as _i2;
import 'package:flutter/src/foundation/change_notifier.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: comment_references
// ignore_for_file: unnecessary_parenthesis

class _FakeConfiguration extends _i1.Fake implements _i2.Configuration {}

class _FakeValueNotifier<T> extends _i1.Fake implements _i3.ValueNotifier<T> {}

/// A class which mocks [ConfigurationProvider].
///
/// See the documentation for Mockito's code generation for more information.
class MockConfigurationProvider extends _i1.Mock
    implements _i2.ConfigurationProvider {
  MockConfigurationProvider() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.Configuration get configuration =>
      (super.noSuchMethod(Invocation.getter(#configuration),
          returnValue: _FakeConfiguration()) as _i2.Configuration);
  @override
  _i3.ValueNotifier<_i2.Configuration> get listenToConfiguration =>
      (super.noSuchMethod(Invocation.getter(#listenToConfiguration),
              returnValue: _FakeValueNotifier<_i2.Configuration>())
          as _i3.ValueNotifier<_i2.Configuration>);
  @override
  _i4.Future<_i2.Configuration> readFromSharedPreferences() =>
      (super.noSuchMethod(Invocation.method(#readFromSharedPreferences, []),
              returnValue: Future.value(_FakeConfiguration()))
          as _i4.Future<_i2.Configuration>);
  @override
  _i4.Future<void> saveLatitude(double? value) =>
      (super.noSuchMethod(Invocation.method(#saveLatitude, [value]),
          returnValue: Future.value(null),
          returnValueForMissingStub: Future.value()) as _i4.Future<void>);
  @override
  _i4.Future<void> saveLongitude(double? value) =>
      (super.noSuchMethod(Invocation.method(#saveLongitude, [value]),
          returnValue: Future.value(null),
          returnValueForMissingStub: Future.value()) as _i4.Future<void>);
  @override
  _i4.Future<void> saveAltitude(double? value) =>
      (super.noSuchMethod(Invocation.method(#saveAltitude, [value]),
          returnValue: Future.value(null),
          returnValueForMissingStub: Future.value()) as _i4.Future<void>);
  @override
  _i4.Future<void> saveLanguage(String? value) =>
      (super.noSuchMethod(Invocation.method(#saveLanguage, [value]),
          returnValue: Future.value(null),
          returnValueForMissingStub: Future.value()) as _i4.Future<void>);
  @override
  _i4.Future<void> saveDateFormat(int? value) =>
      (super.noSuchMethod(Invocation.method(#saveDateFormat, [value]),
          returnValue: Future.value(null),
          returnValueForMissingStub: Future.value()) as _i4.Future<void>);
  @override
  _i4.Future<void> saveSeenDialogVersion(int? version) =>
      (super.noSuchMethod(Invocation.method(#saveSeenDialogVersion, [version]),
          returnValue: Future.value(null),
          returnValueForMissingStub: Future.value()) as _i4.Future<void>);
  @override
  _i4.Future<void> changeLocationMethod(_i2.LocationMethod? value) =>
      (super.noSuchMethod(Invocation.method(#changeLocationMethod, [value]),
          returnValue: Future.value(null),
          returnValueForMissingStub: Future.value()) as _i4.Future<void>);
  @override
  _i4.Future<void> setAutoLocation() =>
      (super.noSuchMethod(Invocation.method(#setAutoLocation, []),
          returnValue: Future.value(null),
          returnValueForMissingStub: Future.value()) as _i4.Future<void>);
}
